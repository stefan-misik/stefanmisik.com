<?php

require_once dirname(__FILE__) . "/parsedown/Parsedown_mod.php";
require_once dirname(__FILE__) . "/modules.php";

class Formatter
{
    const ABSOLUTE_URL_PATTERN = "/^\//";
    const EXTERNAL_URL_PATTERN = "/^[a-zA-Z]+\:\/\//";

	/**
	 * @brief Markdown parser
	 *
	 * @var ParsedownMod
	 */
	private $parser = NULL;

    /**
     * @brief Prefix added to all relative URLs
     *
     * @var string
     */
    private $relative_url_prefix;

    /**
     * @brief Prefix added to all absolute URLs
     *
     * @var string
     */
    private $absolute_url_prefix;

    /**
     * @brief Array of modules to be used by this formatter
     *
     * @var array
     */
    private $registered_modules = array();

    /*========================================================================
                                 Private Methods
      ========================================================================*/

    /**
     * @brief Link processor
     *
     * @param array $element Parsedown element array
     *
     * @return array Processed Parsedown element array
     */
    private function linkProcessor(
            array $element
            ) : array
    {
        $url = $element['attributes']['href'];

        if (preg_match(self::ABSOLUTE_URL_PATTERN, $url))
        {
            $element['attributes']['href'] = $this->absolute_url_prefix . $url;
        }
        elseif (preg_match(self::EXTERNAL_URL_PATTERN, $url))
        {
            $element['attributes']['target'] = "_blank";
            $element['attributes']['class'] = 'external';
        }
        else
        {
            $element['attributes']['href'] = $this->relative_url_prefix . $url;
        }

        return $element;
    }

    /**
     * @brief Module handler function
     *
     * @param string $module Module name
     * @param string $arguments Module arguments
     *
     * @return string HTML generated by the module
     */
    private function moduleHandler(
        string $module,
        string $arguments
    ) : string
    {
        if (array_key_exists($module, $this->registered_modules))
        {
            try
            {
                $module = Module::makeModule(
                        $this->registered_modules[$module],
                        $arguments);

                return $module->getOutput();
            }
            catch (Exception $ex)
            {
                return "<p><strong>Module threw '" . $ex->getMessage() .
                        "'.</strong></p>\n";
            }
        }
        else
        {
            return "<p><strong>Module '" . $module .
                "' does not exist.</strong></p>\n";
        }
    }


    /*========================================================================
                                 Public Methods                              
      ========================================================================*/

	/**
	 * @brief Creates new text formatter instance
	 */
	public function __construct(
		)
	{
		$this->parser = new ParsedownMod();
        // Register URL processor
        $this->parser->setLinkCallback(
            function($url)
            {
                return $this->linkProcessor($url);
            }
        );
        $this->parser->setModuleHandlerCallback(
            function($module, $arguments)
            {
                return $this->moduleHandler($module, $arguments);
            }
        );
	}

	/**
	 * @brief Register modules to be used with this formatter
	 */
	public function registerModules(
		)
	{
		$this->registered_modules = array(
            'contact-form' => 'ContactForm',
            'new-posts' => 'NewPosts'
        );
	}

    /**
     * @brief Configure prefix for all relative URLs
     *
     * @param string|NULL $prefix Prefix to be added to all relative URLs, NULL
     *                            to turn off prefixes
     */
    public function setRelativeUrlPrefix(
            string $prefix
            )
    {
        if (NULL === $prefix)
        {
            $this->relative_url_prefix = "";
        }
        else
        {
            $this->relative_url_prefix = $prefix;
        }
    }

    /**
     * @brief Configure prefix for all absolute URLs
     *
     * @param string|NULL $prefix Prefix to be added to all absolute URLs, NULL
     *                            to turn off prefixes
     */
    public function setAbsoluteUrlPrefix(
            string $prefix
            )
    {
        if (NULL === $prefix)
        {
            $this->absolute_url_prefix = "";
        }
        else
        {
            $this->absolute_url_prefix = $prefix;
        }
    }


    /**
     * @brief Process text and return the HTML representation of the text
     *
     * @param string $source Text source
     */
    public function text(
            $source
            )
    {
        return $this->parser->text($source);
    }

}

